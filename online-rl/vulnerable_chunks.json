{
  "total_chunks": 17,
  "vulnerable_count": 4,
  "safe_count": 13,
  "vulnerable_chunks": [
    {
      "chunk_type": "function",
      "language": "python",
      "function_name": "date_time_extract",
      "file_path": "NLU.py",
      "start_line": 18,
      "end_line": 48,
      "code": "    def date_time_extract(s):\n        #1-Jan-2018\n        pattern1 = r'((?:\\d{1,2}[- ,./]*)(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]*[- ,./]*\\d{4})'\n        #1-jan-2018\n        pattern2 = r'((?:\\d{1,2}[- ,./]*)(?:jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)[a-z]*[- ,./]*\\d{4})'\n        #1-jan-18\n        pattern3= r'((?:\\d{1,2}[- ,./]*)(?:jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)[a-z]*[- ,./]*\\d{2})'\n        #1-Jan-18\n        pattern4 = r'((?:\\d{1,2}[- ,./]*)(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]*[- ,./]*\\d{2})'\n        # 1 st jan 2018\n        pattern5=r'((?:\\d{1,2}[- ,./]*)(?:st|st of|th|of|th of )[a-z]*[- ,./]*(?:jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)[a-z]*[- ,./]*\\d{4})'\n        # 1 st  of Jan\n        pattern6=r'((?:\\d{1,2}[- ,./]*)(?:th|st|st of|of|th of )[a-z]*[- ,./]*(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]*[- ,./]*\\d{4})'\n        #dd/mm/yyyy\n        pattern7=r'((?:\\d{1,2}[- ,./]*)(?:\\d{1,2}[- ,./]*)[- ,./]*\\d{4})'\n\n        #time\n        pattern8=r'([01]?[0-9][:.][0-9]{2}?\\s?[ap]m)'\n\n        pattern=pattern1+\"|\"+pattern2+\"|\"+pattern3+\"|\"+ pattern4+\"|\"+pattern5+\"|\"+pattern6+\"|\"+pattern7+\"|\"+pattern8\n\n\n\n        mydate=re.compile(pattern)\n        mydate=mydate.findall(s,re.I)\n\n\n        for match in mydate:\n            for item in match:\n                if item!='':\n                    return(item)",
      "file_size": 4087,
      "is_vulnerable": true,
      "vulnerability_reason": "The regex patterns used for date extraction may allow for unexpected input formats leading to potential input validation failures."
    },
    {
      "chunk_type": "function",
      "language": "python",
      "function_name": "__init__",
      "file_path": "courier_gateway.py",
      "start_line": 6,
      "end_line": 15,
      "code": "\tdef __init__(self, auth_token, slack_auth_token, to_details, interval, message_type='email'):\n\t\tself.interval = interval\n\t\tself.slack_auth_token = slack_auth_token\n\t\tself.auth_token = auth_token\n\t\tself.to_details = to_details\n\t\tself.message_type = message_type\n\t\tthread = threading.Thread(target=self.run, args=())\n\t\tthread.daemon = True\n\t\tthread.start()\n",
      "file_size": 1370,
      "is_vulnerable": true,
      "vulnerability_reason": "Potential hardcoded sensitive information (auth_tokens) and lack of proper authentication handling."
    },
    {
      "chunk_type": "function",
      "language": "python",
      "function_name": "send_slack",
      "file_path": "courier_gateway.py",
      "start_line": 16,
      "end_line": 32,
      "code": "\tdef send_slack(self):\n\t\tclient = Courier(auth_token=self.auth_token)\n\t\tresp = client.send_message(\n\t\t\tmessage={\n\t\t\t\t\"to\": {\n\t\t\t\t\t\"slack\": {\n\t\t\t\t\t\t\"access_token\": self.slack_auth_token,\n\t\t\t\t\t\t\"channel\": \"C04KW6QLPM5\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\"template\": \"SQJNQEBW7ZMHZJPR06X434M076BS\",\n\t\t\t\t\t\"data\": {\n\t\t\t\t\t\t\"apt_date\": self.to_details['timeDetails'],\n\t\t\t\t\t\t\"apt_time\": self.to_details['eventDetails'],\n\t\t\t\t\t},\n\t\t\t\t})\n",
      "file_size": 1370,
      "is_vulnerable": true,
      "vulnerability_reason": "Uses hardcoded channel ID and sensitive information (slack_auth_token) without proper validation."
    },
    {
      "chunk_type": "function",
      "language": "python",
      "function_name": "query",
      "file_path": "app.py",
      "start_line": 13,
      "end_line": 74,
      "code": "def query(courier_auth_token, slack_auth_token, params):\n\tprestring = \"\"\n\tif params[\"desc\"] == \"None\":\n\t\tuser_input = params['text']\n\t\ttmp_input = re.sub(r'[^\\w\\s]', '', user_input)\n\t\ttime = time_final(tmp_input)\n\t\tdefault_time=time_final('')\n\t\tif time == default_time:\n\t\t\treturn \"Please enter your appointment details!\", \"NLU\"\n\t\telse:\n\t\t\tdetails = process_content(user_input)\n\t\tapp_time = time\n\t\tdate_time_str = app_time\n\t\tdate_time_obj = datetime.datetime.strptime(date_time_str, '%m-%d-%Y %H:%M:%S')\n\t\tdate_time_obj_now = datetime.datetime.now()\n\t\tdiff = date_time_obj - date_time_obj_now\n\t\tdiff_seconds = diff.total_seconds()\n\t\tif diff_seconds<0:\n\t\t\treturn \"You can't schedule an appointment in the past!\", \"NLU\"\n\t\telse:\n\t\t\tif \"slack\" in params[\"text\"].lower():\n\t\t\t\tmode_type = \"slack\"\n\t\t\t\temail = 'Sending to Slack'\n\t\t\telse:\n\t\t\t\tmode_type = \"email\"\n\t\t\t\tmatch = re.search(r'[\\w.+-]+@[\\w-]+\\.[\\w.-]+', user_input)\n\t\t\t\ttry:\n\t\t\t\t\temail = match.group(0)\n\t\t\t\texcept:\n\t\t\t\t\tdetails += \" (Default Email: amanpriyanshusms2001@gmail.com)\"\n\t\t\t\t\temail = \"amanpriyanshusms2001@gmail.com\"\n\t\t\ttoDetails = {'timeDetails': str(date_time_obj.time()), 'eventDetails': str(details), 'email': email}\n\t\t\tif diff_seconds>1800:\n\t\t\t\tThreadedMessenger(courier_auth_token, slack_auth_token, toDetails, diff_seconds-1800, mode_type)\n\t\t\t\tThreadedMessenger(courier_auth_token, slack_auth_token, toDetails, diff_seconds, mode_type)\n\t\t\t\treturn \"Scheduled an appointment for \"+str(date_time_obj)+\" with the specific details! With a reminder 30 minutes before your meeting.\", \"NLU\"\n\t\t\telse:\n\t\t\t\tThreadedMessenger(courier_auth_token, slack_auth_token, toDetails, diff_seconds, mode_type)\n\t\t\t\treturn \"Scheduled an appointment for \"+str(date_time_obj)+\" with the specific details!\", \"NLU\"\n\telse:\n\t\tapp_time = str(params[\"time\"])\n\t\tif '.' in app_time:\n\t\t\tapp_time = app_time[:app_time.index('.')]\n\t\tdate_time_str = str(params[\"date\"])+\" \"+app_time\n\t\tdate_time_obj = datetime.datetime.strptime(date_time_str, '%Y-%m-%d %H:%M:%S')\n\t\tl_desc = params['desc'].lower()\n\t\tdate_time_obj_now = datetime.datetime.now()\n\t\tdiff = date_time_obj - date_time_obj_now\n\t\tdiff_seconds = diff.total_seconds()\n\t\tif diff_seconds<0:\n\t\t\treturn \"You can't schedule an appointment in the past!\", \"Manual\"\n\t\telse:\n\t\t\tmode_type = \"email\"\n\t\t\ttoDetails = {'timeDetails': str(date_time_obj.time()), 'eventDetails': str(params[\"desc\"]), 'email': \"amanpriyanshusms2001@gmail.com\"}\n\t\t\tif diff_seconds>1800:\n\t\t\t\tThreadedMessenger(courier_auth_token, slack_auth_token, toDetails, diff_seconds-1800, mode_type)\n\t\t\t\tThreadedMessenger(courier_auth_token, slack_auth_token, toDetails, diff_seconds, mode_type)\n\t\t\t\treturn \"Scheduled an appointment for \"+str(params[\"date\"])+\" \"+str(params[\"time\"])+\" to the user's amanpriyanshusms2001@gmail.com! With a reminder 30 minutes before your meeting.\", \"Manual\"\n\t\t\telse:\n\t\t\t\tThreadedMessenger(courier_auth_token, slack_auth_token, toDetails, diff_seconds, mode_type)\n\t\t\t\treturn \"Scheduled an appointment for \"+str(params[\"date\"])+\" \"+str(params[\"time\"])+\" to the user's amanpriyanshusms2001@gmail.com!\", \"Manual\"\n",
      "file_size": 5310,
      "is_vulnerable": true,
      "vulnerability_reason": "Potential SQL injection due to unsanitized input from params['text'] in regex operations."
    }
  ]
}