[
  {
    "chunk_type": "file",
    "language": "unknown",
    "function_name": "requirements",
    "file_path": "requirements.txt",
    "start_line": 1,
    "end_line": 6,
    "code": "trycourier==4.4.0\nstreamlit-chat==0.0.2.1\nparsedatetime==2.6\nnltk==3.7\nspacy==3.3.1\nen-core-web-sm @ https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.3.0/en_core_web_sm-3.3.0-py3-none-any.whl",
    "file_size": 219
  },
  {
    "chunk_type": "file",
    "language": "unknown",
    "function_name": "requirements_dump",
    "file_path": "requirements_dump.txt",
    "start_line": 1,
    "end_line": 384,
    "code": "apyori==1.1.2\nargon2-cffi==21.3.0\nargon2-cffi-bindings==21.2.0\narray2gif==1.0.4\nasttokens==2.0.5\nastunparse==1.6.3\nasync-timeout==4.0.2\nattrs==21.4.0\nAutomat==20.2.0\nbackcall==0.2.0\nbashplotlib==0.6.5\nbeautifulsoup4==4.11.1\nbert-score==0.3.12\nbleach==5.0.0\nblinker==1.4\nblis==0.7.7\nbpemb==0.3.4\nCacheControl==0.12.11\ncachetools==5.1.0\ncachy==0.3.0\ncatalogue==2.0.7\ncertifi==2022.5.18.1\ncffi==1.15.0\nchardet==3.0.4\ncharset-normalizer==2.0.12\ncleo==1.0.0a5\nclick==8.0.4\ncloudpickle==2.1.0\ncolorama==0.4.4\ncolorcet==3.0.1\ncommonmark==0.9.1\ncomtypes==1.1.11\nconllu==4.5.2\nconstantly==15.1.0\ncopulas==0.7.0\ncrashtest==0.3.1\ncryptography==37.0.4\ncssselect==1.1.0\nctgan==0.5.1\ncupy-cuda113==10.5.0\ncycler==0.11.0\ncymem==2.0.6\nCython==0.29.28\ndask==2023.1.0\ndatasets==2.3.2\ndatashader==0.14.3\ndatashape==0.5.2\ndeap==1.3.1\ndebugpy==1.6.0\ndecorator==5.1.1\ndeepecho==0.3.0.post1\ndefusedxml==0.7.1\nDeprecated==1.2.13\ndill==0.3.5.1\ndistlib==0.3.4\ndnspython==1.16.0\ndocopt==0.6.2\ndocutils==0.18.1\nDPSDV==0.0.3\nduckling==1.8.0\ndulwich==0.20.46\neditdistance==0.6.0\nen-core-web-sm @ https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.3.0/en_core_web_sm-3.3.0-py3-none-any.whl\nen-core-web-trf @ https://github.com/explosion/spacy-models/releases/download/en_core_web_trf-3.3.0/en_core_web_trf-3.3.0-py3-none-any.whl\nentrypoints==0.4\nexceptiongroup==1.1.0\nexecuting==0.8.3\nFaker==9.9.1\nfastapi==0.78.0\nfastjsonschema==2.15.3\nfastrlock==0.8\nffmpeg-python==0.2.0\nfilelock==3.7.1\nflair==0.11.3\nFlask==2.1.2\nflask-ngrok==0.0.25\nFlask-RESTful==0.3.9\nflatbuffers==22.9.24\nfonttools==4.33.3\nfrozenlist==1.3.0\nfsspec==2022.5.0\nftfy==6.1.1\nfuture==0.18.2\ngast==0.4.0\ngdown==4.4.0\ngensim==4.2.0\ngeppy==0.1.3\ngitdb==4.0.9\nGitPython==3.1.27\ngoogle-auth==2.6.6\ngoogle-auth-oauthlib==0.4.6\ngoogle-pasta==0.2.0\ngraph-tiger==0.2.5\ngraphviz==0.20\ngreenlet==1.1.2\ngrpcio==1.46.3\ngym==0.21.0\nh11==0.13.0\nh5py==3.7.0\nhtml5lib==1.1\nhuggingface-hub==0.7.0\nhyperlink==21.0.0\nhyperopt==0.2.7\nidna==3.3\nigraph==0.9.11\n",
    "file_size": 7087
  },
  {
    "chunk_type": "file",
    "language": "unknown",
    "function_name": "README",
    "file_path": "README.md",
    "start_line": 1,
    "end_line": 52,
    "code": "# PigeonAssistez\n\n![demo](https://github.com/AmanPriyanshu/PigeonAssistez/blob/main/images/github.png)\n\n## Introduction\nIntroducing the ultimate productivity tool for busy bees, Pigeon Assistez, - our AI (NLP) based chatbot that helps you schedule your appointments in a breeze! Say goodbye to the hassle of dealing with static scheduling apps and hello to engaging conversations with our chatbot. With state-of-the-art intent inference, date/time tag retrieval, and POS tagging, our chatbot can infer meeting timings from even the most obscure minute-of-the-meeting notes.\n\nBut that's not all, our chatbot goes above and beyond just scheduling appointments. With the integration of Courier's API, we've built in notifications and reminders straight to your email and slack, ensuring that you never miss a meeting again. No more \"oops, I forgot\" moments, our chatbot's got your back!\n\nIn a nutshell, our chatbot is designed to take the pain out of scheduling appointments, and we've gone the extra mile by integrating Courier's API to make sure you never miss a meeting again. With its quirky, engaging nature and state-of-the-art technology, our chatbot is the ultimate productivity tool for anyone looking to kickstart their 2023 with a bang!\n\n## Inspiration\nWhen we first heard about the theme of the hackathon, \"Let's kickstart 2023 by building productivity tools,\" we desired to build a product that creates an indelible impact in people's lives. As we started brainstorming, we kept returning to the idea of a chatbot that could help schedule appointments. We all know how frustrating it can be to try and coordinate schedules with other people, especially when trying to book a meeting or an appointment. Delving deeper into the idea, we realized the vast scope this had.\n\nThat's when we stumbled upon Courier's fast-paced API. It gave us the freedom to explore beyond just the limited vision of project stage updation or work-hours computation. We could now leverage its timely attributes to ",
    "file_size": 8418
  },
  {
    "chunk_type": "function",
    "language": "python",
    "function_name": "time_final",
    "file_path": "NLU.py",
    "start_line": 15,
    "end_line": 15,
    "code": "def time_final(content):",
    "file_size": 4087
  },
  {
    "chunk_type": "function",
    "language": "python",
    "function_name": "date_time_extract",
    "file_path": "NLU.py",
    "start_line": 18,
    "end_line": 48,
    "code": "    def date_time_extract(s):\n        #1-Jan-2018\n        pattern1 = r'((?:\\d{1,2}[- ,./]*)(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]*[- ,./]*\\d{4})'\n        #1-jan-2018\n        pattern2 = r'((?:\\d{1,2}[- ,./]*)(?:jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)[a-z]*[- ,./]*\\d{4})'\n        #1-jan-18\n        pattern3= r'((?:\\d{1,2}[- ,./]*)(?:jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)[a-z]*[- ,./]*\\d{2})'\n        #1-Jan-18\n        pattern4 = r'((?:\\d{1,2}[- ,./]*)(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]*[- ,./]*\\d{2})'\n        # 1 st jan 2018\n        pattern5=r'((?:\\d{1,2}[- ,./]*)(?:st|st of|th|of|th of )[a-z]*[- ,./]*(?:jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)[a-z]*[- ,./]*\\d{4})'\n        # 1 st  of Jan\n        pattern6=r'((?:\\d{1,2}[- ,./]*)(?:th|st|st of|of|th of )[a-z]*[- ,./]*(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]*[- ,./]*\\d{4})'\n        #dd/mm/yyyy\n        pattern7=r'((?:\\d{1,2}[- ,./]*)(?:\\d{1,2}[- ,./]*)[- ,./]*\\d{4})'\n\n        #time\n        pattern8=r'([01]?[0-9][:.][0-9]{2}?\\s?[ap]m)'\n\n        pattern=pattern1+\"|\"+pattern2+\"|\"+pattern3+\"|\"+ pattern4+\"|\"+pattern5+\"|\"+pattern6+\"|\"+pattern7+\"|\"+pattern8\n\n\n\n        mydate=re.compile(pattern)\n        mydate=mydate.findall(s,re.I)\n\n\n        for match in mydate:\n            for item in match:\n                if item!='':\n                    return(item)",
    "file_size": 4087
  },
  {
    "chunk_type": "function",
    "language": "python",
    "function_name": "time_extract",
    "file_path": "NLU.py",
    "start_line": 49,
    "end_line": 62,
    "code": "    def time_extract(s):\n        pattern8=r'([01]?[0-9][:.][0-9]{2}?\\s?[ap]m)'\n\n\n        pattern=pattern8\n        mydate=re.compile(pattern)\n        mydate=mydate.findall(s,re.IGNORECASE)\n\n\n        for match in mydate:\n\n            return(match)\n\n",
    "file_size": 4087
  },
  {
    "chunk_type": "function",
    "language": "python",
    "function_name": "process_content",
    "file_path": "NLU.py",
    "start_line": 86,
    "end_line": 118,
    "code": "def process_content(content):\n        s=content\n        train_text = state_union.raw(\"2005-GWBush.txt\")\n        custom_sent_tokenizer = PunktSentenceTokenizer(train_text)\n        tokenized = custom_sent_tokenizer.tokenize(s)\n        i=(tokenized[0])\n        words=nltk.word_tokenize(i)\n        ref=[\"mrs\",\"mr\",\"miss\", \"with\", 'hi']+['a', 'an', 'the', 'and', 'it', 'for', 'or', 'but', 'in', 'my', 'your', 'our', 'their']\n        for a in words :\n            if a.lower() in ref:\n                no=words.index(a)\n                del words[no]\n        tagged = nltk.pos_tag(words)\n        chunkGram = r\"\"\"NP: {(<DT>?<JJ>*(<NN>|<NNS>|<NNP>)+<JJ>*<C.>*<IN>*<TO>*(<PRP>|<PRP.>)*<RB.>*)*}\n                        \"\"\"\n        chunkParser = nltk.RegexpParser(chunkGram)\n        chunked = chunkParser.parse(tagged)\n        def filt(x):\n            return x.label()=='NP'\n\n        for subtree in chunked.subtrees(filter =  filt):\n             n= (len(subtree))\n             a=list((subtree[n-1]))\n             if ((a[1]) == \"IN\"):\n                 remove=True\n             else :\n                 remove=False\n             output=' '.join([w for w, t in subtree.leaves()])\n             if remove:\n                 output=output.rsplit(' ', 1)[0]\n             return(output)\n             break\n",
    "file_size": 4087
  },
  {
    "chunk_type": "function",
    "language": "python",
    "function_name": "filt",
    "file_path": "NLU.py",
    "start_line": 103,
    "end_line": 105,
    "code": "        def filt(x):\n            return x.label()=='NP'\n",
    "file_size": 4087
  },
  {
    "chunk_type": "function",
    "language": "python",
    "function_name": "__init__",
    "file_path": "courier_gateway.py",
    "start_line": 6,
    "end_line": 15,
    "code": "\tdef __init__(self, auth_token, slack_auth_token, to_details, interval, message_type='email'):\n\t\tself.interval = interval\n\t\tself.slack_auth_token = slack_auth_token\n\t\tself.auth_token = auth_token\n\t\tself.to_details = to_details\n\t\tself.message_type = message_type\n\t\tthread = threading.Thread(target=self.run, args=())\n\t\tthread.daemon = True\n\t\tthread.start()\n",
    "file_size": 1370
  },
  {
    "chunk_type": "function",
    "language": "python",
    "function_name": "send_slack",
    "file_path": "courier_gateway.py",
    "start_line": 16,
    "end_line": 32,
    "code": "\tdef send_slack(self):\n\t\tclient = Courier(auth_token=self.auth_token)\n\t\tresp = client.send_message(\n\t\t\tmessage={\n\t\t\t\t\"to\": {\n\t\t\t\t\t\"slack\": {\n\t\t\t\t\t\t\"access_token\": self.slack_auth_token,\n\t\t\t\t\t\t\"channel\": \"C04KW6QLPM5\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\"template\": \"SQJNQEBW7ZMHZJPR06X434M076BS\",\n\t\t\t\t\t\"data\": {\n\t\t\t\t\t\t\"apt_date\": self.to_details['timeDetails'],\n\t\t\t\t\t\t\"apt_time\": self.to_details['eventDetails'],\n\t\t\t\t\t},\n\t\t\t\t})\n",
    "file_size": 1370
  },
  {
    "chunk_type": "function",
    "language": "python",
    "function_name": "send_email",
    "file_path": "courier_gateway.py",
    "start_line": 33,
    "end_line": 46,
    "code": "\tdef send_email(self):\n\t\tclient = Courier(auth_token=self.auth_token)\n\t\tresp = client.send_message(\n\t\t\tmessage={\n\t\t\t\"to\": {\n\t\t\t\t\"email\": self.to_details['email']\n\t\t\t\t},\n\t\t\t\"template\": \"N7MYVF5PWS4J2EKKG4HAYBVSM2CW\",\n\t\t\t\t\"data\": {\n\t\t\t\t\t\"timeDetails\": self.to_details['timeDetails'],\n\t\t\t\t\t\"eventDetails\": self.to_details['eventDetails'],\n\t\t\t\t\t},\n\t\t\t})\n",
    "file_size": 1370
  },
  {
    "chunk_type": "function",
    "language": "python",
    "function_name": "run",
    "file_path": "courier_gateway.py",
    "start_line": 47,
    "end_line": 54,
    "code": "\tdef run(self):\n\t\ttime.sleep(self.interval)\n\t\tif self.message_type=='email':\n\t\t\tself.send_email()\n\t\telif self.message_type=='slack':\n\t\t\tself.send_slack()\n\n",
    "file_size": 1370
  },
  {
    "chunk_type": "class",
    "language": "python",
    "class_name": "ThreadedMessenger",
    "function_name": "ThreadedMessenger",
    "file_path": "courier_gateway.py",
    "start_line": 5,
    "end_line": 54,
    "code": "class ThreadedMessenger(object):\n\tdef __init__(self, auth_token, slack_auth_token, to_details, interval, message_type='email'):\n\t\tself.interval = interval\n\t\tself.slack_auth_token = slack_auth_token\n\t\tself.auth_token = auth_token\n\t\tself.to_details = to_details\n\t\tself.message_type = message_type\n\t\tthread = threading.Thread(target=self.run, args=())\n\t\tthread.daemon = True\n\t\tthread.start()\n\n\tdef send_slack(self):\n\t\tclient = Courier(auth_token=self.auth_token)\n\t\tresp = client.send_message(\n\t\t\tmessage={\n\t\t\t\t\"to\": {\n\t\t\t\t\t\"slack\": {\n\t\t\t\t\t\t\"access_token\": self.slack_auth_token,\n\t\t\t\t\t\t\"channel\": \"C04KW6QLPM5\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\"template\": \"SQJNQEBW7ZMHZJPR06X434M076BS\",\n\t\t\t\t\t\"data\": {\n\t\t\t\t\t\t\"apt_date\": self.to_details['timeDetails'],\n\t\t\t\t\t\t\"apt_time\": self.to_details['eventDetails'],\n\t\t\t\t\t},\n\t\t\t\t})\n\n\tdef send_email(self):\n\t\tclient = Courier(auth_token=self.auth_token)\n\t\tresp = client.send_message(\n\t\t\tmessage={\n\t\t\t\"to\": {\n\t\t\t\t\"email\": self.to_details['email']\n\t\t\t\t},\n\t\t\t\"template\": \"N7MYVF5PWS4J2EKKG4HAYBVSM2CW\",\n\t\t\t\t\"data\": {\n\t\t\t\t\t\"timeDetails\": self.to_details['timeDetails'],\n\t\t\t\t\t\"eventDetails\": self.to_details['eventDetails'],\n\t\t\t\t\t},\n\t\t\t})\n\n\tdef run(self):\n\t\ttime.sleep(self.interval)\n\t\tif self.message_type=='email':\n\t\t\tself.send_email()\n\t\telif self.message_type=='slack':\n\t\t\tself.send_slack()\n\n",
    "file_size": 1370
  },
  {
    "chunk_type": "function",
    "language": "python",
    "function_name": "get_text",
    "file_path": "app.py",
    "start_line": 9,
    "end_line": 12,
    "code": "def get_text():\n\tinput_text = st.text_input(\"You: \",\"Hello, how are you?\", key=\"input\")\n\treturn input_text \n",
    "file_size": 5310
  },
  {
    "chunk_type": "function",
    "language": "python",
    "function_name": "query",
    "file_path": "app.py",
    "start_line": 13,
    "end_line": 74,
    "code": "def query(courier_auth_token, slack_auth_token, params):\n\tprestring = \"\"\n\tif params[\"desc\"] == \"None\":\n\t\tuser_input = params['text']\n\t\ttmp_input = re.sub(r'[^\\w\\s]', '', user_input)\n\t\ttime = time_final(tmp_input)\n\t\tdefault_time=time_final('')\n\t\tif time == default_time:\n\t\t\treturn \"Please enter your appointment details!\", \"NLU\"\n\t\telse:\n\t\t\tdetails = process_content(user_input)\n\t\tapp_time = time\n\t\tdate_time_str = app_time\n\t\tdate_time_obj = datetime.datetime.strptime(date_time_str, '%m-%d-%Y %H:%M:%S')\n\t\tdate_time_obj_now = datetime.datetime.now()\n\t\tdiff = date_time_obj - date_time_obj_now\n\t\tdiff_seconds = diff.total_seconds()\n\t\tif diff_seconds<0:\n\t\t\treturn \"You can't schedule an appointment in the past!\", \"NLU\"\n\t\telse:\n\t\t\tif \"slack\" in params[\"text\"].lower():\n\t\t\t\tmode_type = \"slack\"\n\t\t\t\temail = 'Sending to Slack'\n\t\t\telse:\n\t\t\t\tmode_type = \"email\"\n\t\t\t\tmatch = re.search(r'[\\w.+-]+@[\\w-]+\\.[\\w.-]+', user_input)\n\t\t\t\ttry:\n\t\t\t\t\temail = match.group(0)\n\t\t\t\texcept:\n\t\t\t\t\tdetails += \" (Default Email: amanpriyanshusms2001@gmail.com)\"\n\t\t\t\t\temail = \"amanpriyanshusms2001@gmail.com\"\n\t\t\ttoDetails = {'timeDetails': str(date_time_obj.time()), 'eventDetails': str(details), 'email': email}\n\t\t\tif diff_seconds>1800:\n\t\t\t\tThreadedMessenger(courier_auth_token, slack_auth_token, toDetails, diff_seconds-1800, mode_type)\n\t\t\t\tThreadedMessenger(courier_auth_token, slack_auth_token, toDetails, diff_seconds, mode_type)\n\t\t\t\treturn \"Scheduled an appointment for \"+str(date_time_obj)+\" with the specific details! With a reminder 30 minutes before your meeting.\", \"NLU\"\n\t\t\telse:\n\t\t\t\tThreadedMessenger(courier_auth_token, slack_auth_token, toDetails, diff_seconds, mode_type)\n\t\t\t\treturn \"Scheduled an appointment for \"+str(date_time_obj)+\" with the specific details!\", \"NLU\"\n\telse:\n\t\tapp_time = str(params[\"time\"])\n\t\tif '.' in app_time:\n\t\t\tapp_time = app_time[:app_time.index('.')]\n\t\tdate_time_str = str(params[\"date\"])+\" \"+app_time\n\t\tdate_time_obj = datetime.datetime.strptime(date_time_str, '%Y-%m-%d %H:%M:%S')\n\t\tl_desc = params['desc'].lower()\n\t\tdate_time_obj_now = datetime.datetime.now()\n\t\tdiff = date_time_obj - date_time_obj_now\n\t\tdiff_seconds = diff.total_seconds()\n\t\tif diff_seconds<0:\n\t\t\treturn \"You can't schedule an appointment in the past!\", \"Manual\"\n\t\telse:\n\t\t\tmode_type = \"email\"\n\t\t\ttoDetails = {'timeDetails': str(date_time_obj.time()), 'eventDetails': str(params[\"desc\"]), 'email': \"amanpriyanshusms2001@gmail.com\"}\n\t\t\tif diff_seconds>1800:\n\t\t\t\tThreadedMessenger(courier_auth_token, slack_auth_token, toDetails, diff_seconds-1800, mode_type)\n\t\t\t\tThreadedMessenger(courier_auth_token, slack_auth_token, toDetails, diff_seconds, mode_type)\n\t\t\t\treturn \"Scheduled an appointment for \"+str(params[\"date\"])+\" \"+str(params[\"time\"])+\" to the user's amanpriyanshusms2001@gmail.com! With a reminder 30 minutes before your meeting.\", \"Manual\"\n\t\t\telse:\n\t\t\t\tThreadedMessenger(courier_auth_token, slack_auth_token, toDetails, diff_seconds, mode_type)\n\t\t\t\treturn \"Scheduled an appointment for \"+str(params[\"date\"])+\" \"+str(params[\"time\"])+\" to the user's amanpriyanshusms2001@gmail.com!\", \"Manual\"\n",
    "file_size": 5310
  },
  {
    "chunk_type": "function",
    "language": "python",
    "function_name": "clear_desc",
    "file_path": "app.py",
    "start_line": 75,
    "end_line": 79,
    "code": "def clear_desc():\n\tst.session_state['description'] = 'None' \n\treturn 'None'\n\n",
    "file_size": 5310
  },
  {
    "chunk_type": "function",
    "language": "python",
    "function_name": "main",
    "file_path": "app.py",
    "start_line": 80,
    "end_line": 130,
    "code": "def main():\n\tst.title(\"Chat with our Bespoke Pigeon\")\n\tst.markdown(\"##### We use Courier to deliver your messages, whereas our in-house chatbot helps organize your schedules amonst individuals or your slack team.\")\n\twith st.sidebar:\n\t\tst.image('logo.png')\n\t\tcourier_auth_token = st.text_input(\"Enter Courier Auth-Token\", type=\"password\")\n\t\tslack_auth_token = st.text_input(\"Enter Slack Auth-Token\", type=\"password\")\n\n\tif 'generated' not in st.session_state:\n\t\tst.session_state['generated'] = []\n\tif 'past' not in st.session_state:\n\t\tst.session_state['past'] = []\n\n\twith st.expander(\"Schedule your appointment (manually)\"):\n\t\t_, col_j = st.columns([4, 1])\n\t\twith col_j:\n\t\t\tif st.button(\"Reset\"):\n\t\t\t\tst.session_state['description'] = 'None'\n\t\tcol_a, col_b, col_c = st.columns([1, 1, 4])\n\t\twith col_a:\n\t\t\td = st.date_input(\"Enter Date\", datetime.datetime.now().date())\n\t\twith col_b:\n\t\t\tt = st.time_input('Enter Time', datetime.datetime.now().time())\n\t\twith col_c:\n\t\t\tplaceholder = st.empty()\n\t\t\tdesc = placeholder.text_input(\"Enter Details\", \"None\", key=\"description\")\n\n\tcol1, col2 = st.columns([7, 1])\n\twith col1:\n\t\tuser_input = get_text()\n\twith col2:\n\t\tst.text(\"\")\n\t\tst.text(\"\")\n\t\tif st.button(\"Send\"):\n\t\t\toutput, response = query(courier_auth_token, slack_auth_token, {\n\t\t\t\t\t\"date\": d,\n\t\t\t\t\t\"time\": t,\n\t\t\t\t\t\"desc\": desc,\n\t\t\t\t\t\"text\": user_input,\n\t\t\t\t})\n\t\t\tif response=='Manual':\n\t\t\t\tst.session_state.past.append(\"Manually entered: \"+str(d)+\" \"+str(t)+\". With Details: \"+desc)\n\t\t\telse:\n\t\t\t\tst.session_state.past.append(user_input)\n\t\t\tst.session_state.generated.append(output)\n\n\tif st.session_state['generated']:\n\t\tfor i in range(len(st.session_state['generated'])-1, -1, -1):\n\t\t\tmessage(st.session_state[\"generated\"][i], key=str(i))\n\t\t\tmessage(st.session_state['past'][i], is_user=True, key=str(i) + '_user')\n",
    "file_size": 5310
  }
]